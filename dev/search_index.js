var documenterSearchIndex = {"docs":
[{"location":"example/#Package-Imports","page":"Example","title":"Package Imports","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"using Hyperelastics\nusing Optimization, OptimizationOptimJL\nusing ComponentArrays: ComponentVector\nusing CairoMakie, MakiePublication\nset_theme!(theme_web(width = 800))","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"For commonly used datasets in hyperelastic modelling, such as the Treloar1944Uniaxial data, functions are available for getting the datasets:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"f = Figure()\nax = Makie.Axis(f[1,1])\ntreloar_data = Treloar1944Uniaxial()\nscatter!(ax, \n    getindex.(treloar_data.data.λ, 1), \n    getindex.(treloar_data.data.s, 1), \n    label = \"Treloar 1944 Experimental\",\n    color = :black\n)\naxislegend(position = :lt)\nf","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Multiple dispatch is used on the corresponding function to calculate the values. Based on the model passed to the function, the correct method will be used in the calculation. StrainEnergyDensity, SecondPiolaKirchoffStressTensor, and CauchyStressTensor accept the deformation state as either the principal components in a vector, [λ₁, λ₂, λ₃] or as the deformation gradient matrix, Fᵢⱼ. The returned value matches the type of the input. Parameters are accessed by field allowing for structs, NamedTuples, or other field-based data-types such as those in ComponentArrays.jl and LabelledArrays.jl. For example, the NeoHookean model is accessed with:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"ψ = NeoHookean()\nλ⃗ = [2.0, sqrt(1/2), sqrt(1/2)]\np = (μ = 10.0, )\nStrainEnergyDensity(ψ, λ⃗, p)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"or ","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"F = rand(3,3)\np = (μ = 20.0, )\nStrainEnergyDensity(ψ, F, p)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"A method for creating an OptimizationProblem compatible with Optimization.jl is provided. To fit the NeoHookean model to the Treloar data previously loaded, an additional field-indexed array is used as the initial guess to HyperelasticProblem. It is recommendedto use ComponentArrays.jl for optimization of model parameters.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"prob = HyperelasticProblem(ψ, treloar_data, ComponentVector(μ = 0.2))\nsolve(prob, LBFGS())","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"For fiting multiple models to the same dataset, ","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"models = Dict(\n    Gent => ComponentVector(μ=240e-3, Jₘ=80.0),\n    EdwardVilgis => ComponentVector(Ns=0.10, Nc=0.20, α=0.001, η=0.001),\n    ModifiedFloryErman => ComponentVector(μ=0.24, N=50.0, κ=10.0),\n    NeoHookean => ComponentVector(μ=200e-3),\n    NonaffineMicroSphere => ComponentVector(μ=0.292, N=22.5, p=1.471, U=0.744, q=0.1086),\n    Beda => ComponentVector(C1=0.1237, C2=0.0424, C3=7.84e-5, K1=0.0168, α=0.9, β=0.68, ζ=3.015)\n)\n\nsol = Dict{DataType, SciMLSolution}()\nfor (ψ, p₀) in models\n    HEProblem = HyperelasticProblem(ψ(), treloar_data, p₀)\n    sol[ψ] = solve(HEProblem, NelderMead())\n    @show ψ, sol[ψ].u\nend","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"To predict the reponse of a model to a proivded dataset and parameters, a predict function is provided:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"f = Figure()\nax = Makie.Axis(f[1,1])\nfor (ψ, p) in sol\n    pred = predict(ψ(), treloar_data, p.u)\n    lines!(ax, getindex.(pred.data.λ, 1), getindex.(pred.data.s, 1), label=string(ψ))\nend\nscatter!(ax, getindex.(treloar_data.data.λ, 1), getindex.(treloar_data.data.s, 1), label = \"Treloar 1944 Experimental\", color = :black)\naxislegend(position = :lt)\nf","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"While the majority of the models provided by Hyperelastics.jl are based on closed form strain energy density functions, a selection of data-driven models are proivded. For example, the SussmanBathe model is created with:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"using DataInterpolations\nψ = SussmanBathe(treloar_data, k=4, interpolant = QuadraticSpline)\nλ₁ = range(extrema(getindex.(treloar_data.data.λ, 1))..., length = 100)\nuniaxial_prediction = HyperelasticUniaxialTest(λ₁, name = \"Prediction\")\npred = predict(ψ, uniaxial_prediction, [])\nλ₁ = getindex.(treloar_data.data.λ, 1)\ns₁ = getindex.(treloar_data.data.s, 1)\nλ̂₁ = getindex.(pred.data.λ, 1)\nŝ₁ = getindex.(pred.data.s, 1)\n\n\nf, ax, p = lines( \n    λ̂₁, \n    ŝ₁, \n    label = \"Sussman-Bathe Approximation\"\n)\n\nscatter!(\n        ax,\n        λ₁, \n        s₁, \n        label = \"Treloar 1944 Experimental\",\n        color = :black\n    )\naxislegend(position = :lt)\nf","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Hyperelastics","category":"page"},{"location":"#Hyperelastics","page":"Home","title":"Hyperelastics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Hyperelastics.jl relies on ContinuumMechanicsBase.jl for the definitions of key continuum terms. Please cite the package if you use it in your work.","category":"page"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = Hyperelastics","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"},{"location":"API/#Incompressible-Models","page":"API","title":"Incompressible Models","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [Hyperelastics]\nFilter = x -> typeof(x) === DataType && t <: Hyperelastics.AbstractIncompressibleModel","category":"page"},{"location":"API/#Compressible-Models","page":"API","title":"Compressible Models","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [Hyperelastics]\nFilter = x -> typeof(x) === DataType && t <: Hyperelastics.AbstractCompressibleModel\n","category":"page"},{"location":"API/#Helper-Functions","page":"API","title":"Helper Functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [Hyperelastics]\nOrder = [:function]","category":"page"},{"location":"API/#ContinuumMechanicsBase.CauchyStressTensor-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Vector{R}, Any}} where {T<:PrincipalValueForm, R}","page":"API","title":"ContinuumMechanicsBase.CauchyStressTensor","text":"CauchyStressTensor(ψ::AbstractHyperelasticModel, λ⃗::AbstractVector, p; adb=AD.ForwardDiffBackend())\n\nReturns the Cauchy stress tensor for the hyperelastic model ψ with the principle stretches λ⃗ with parameters p.\n\nFields:\n\nψ: Hyperelastic model\nλ⃗: Vector of principal stretches\np: Model parameters\nadb: Differentiation backend from AbstractDifferentiation.jl\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.CauchyStressTensor-Union{Tuple{S}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Matrix{S}, Any}} where {T<:PrincipalValueForm, S}","page":"API","title":"ContinuumMechanicsBase.CauchyStressTensor","text":"CauchyStressTensor(ψ::AbstractHyperelasticModel, F::AbstractMatrix, p; adb=AD.ForwardDiffBackend())\n\nReturns the Cauchy stress tensor for the hyperelastic model ψ with the deformation gradient F with parameters p.\n\nFields:\n\nψ: Hyperelastic model\nF: Deformation gradient tensor\np: Model parameters\nadb: Differentiation backend from AbstractDifferentiation.jl\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.I₁-Tuple{AbstractVector}","page":"API","title":"ContinuumMechanicsBase.I₁","text":"First stretch invariant - Currently requires the addition of 5 times the machine precision to allow AD to work correctly\n\nI_1(veclambda) = lambda_1^2+lambda_2^2+lambda_3^2 + 5varepsilon\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.I₂-Tuple{AbstractVector}","page":"API","title":"ContinuumMechanicsBase.I₂","text":"Second Stretch invariant\n\nI_2(veclambda) = lambda_1^-2+lambda_2^-2+lambda_3^-2\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.I₃-Tuple{AbstractVector}","page":"API","title":"ContinuumMechanicsBase.I₃","text":"Third Stretch invariant\n\nI_3(veclambda) = (lambda_1lambda_2lambda_3)^2\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.J-Tuple{AbstractVector}","page":"API","title":"ContinuumMechanicsBase.J","text":"Volumetric Stretch\n\nJ(veclambda) = lambda_1lambda_2lambda_3\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.SecondPiolaKirchoffStressTensor-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Matrix{R}, Any}} where {T<:PrincipalValueForm, R}","page":"API","title":"ContinuumMechanicsBase.SecondPiolaKirchoffStressTensor","text":"SecondPiolaKirchoffStressTensor(ψ::AbstractHyperelasticModel, F::AbstractMatrix, p; adb=AD.ForwardDiffBackend())\n\nReturns the second PK stress tensor for the hyperelastic model ψ with the deformation gradient F with parameters p.\n\nFields:\n\nψ: Hyperelastic model\nF: Deformation gradient tensor\np: Model parameters\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.SecondPiolaKirchoffStressTensor-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Vector{R}, Any}} where {T<:PrincipalValueForm, R}","page":"API","title":"ContinuumMechanicsBase.SecondPiolaKirchoffStressTensor","text":"SecondPiolaKirchoffStressTensor(ψ::AbstractHyperelasticModel, λ⃗::AbstractVector, p; ad_type=AD.ForwardDiffBackend())\n\nReturns the second PK stress tensor for the hyperelastic model ψ with the principle stretches λ⃗ with parameters p.\n\nFields:\n\nψ: Hyperelastic model\nλ⃗: Vector of principal stretches\np: Model parameters\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.StrainEnergyDensity-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Matrix{R}, Any}} where {T<:PrincipalValueForm, R}","page":"API","title":"ContinuumMechanicsBase.StrainEnergyDensity","text":"StrainEnergyDensity(ψ, F, p)\n\nReturns a function for the strain energy density function for the hyperelastic model based on calculating the principal stretches of the deformation gradient, F. The eigen values are found by the following procedure:\n\nC = F^T cdot F\na = transpose(eigvecs(C))\nC^ast = (U^ast)^2 = a^T cdot C cdot a\nveclambda = diag(U)\n\nFields:\n\nψ: Hyperelastic model\nF: Deformation gradient matrix\np: Model parameters\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.StrainEnergyDensity-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Vector{R}, Any}} where {T, R}","page":"API","title":"ContinuumMechanicsBase.StrainEnergyDensity","text":"StrainEnergyDensity(ψ, λ⃗, p)\n\nReturns the strain energy density for the hyperelastic model ψ with the principle stretches λ⃗ with parameters p.\n\nFields:\n\nψ: Hyperelastic model\nλ⃗: Vector of principal stretches\np: Model parameters\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HyperelasticProblem","page":"API","title":"Hyperelastics.HyperelasticProblem","text":"HyperelasticProblem(ψ::AbstractHyperelasticModel, test::AbstractHyperelasticTest, u₀, ps=Nothing;     adb=AD.ForwardDiffBackend(), loss=L2DistLoss(), adtype=Optimization.AutoForwardDiff())\n\nHyperelasticProblem(ψ::AbstractHyperelasticModel, tests::Vector{<:AbstractHyperelasticTest}, u₀, ps=Nothing;     adb=AD.ForwardDiffBackend(), loss=L2DistLoss(), adtype=Optimization.AutoForwardDiff())\n\nCreates an OptimizationProblem for use in Optimization.jl to find the optimal parameters.\n\nFields:\n\nψ: material model to use\ntest or tests: A single or vector of hyperelastics tests to use when fitting the parameters\nu₀: Initial guess for parameters\nps: Any additional parameters for calling predict\nadb: Select differentiation type from ADTypes.jl. The type is automatically applied to the type of AD applied to the Optimization Problem also.\nloss: Loss function from LossFunctions.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#Hyperelastics.Kawabata1981-Tuple{Any}","page":"API","title":"Hyperelastics.Kawabata1981","text":"Kawabata1981(λ₁)\n\nBiaxial Experimental Data from Kawabata et al. The model is more challenging to correctly fit a hyperelastic model to and is proposed as a better test than the Treloar1944 simple tension dataset.\n\nData provided for fixed λ₁ of:\n\n1.040\n1.060\n1.080\n1.100\n1.120\n1.14\n1.16\n1.2\n1.24\n1.3\n1.6\n1.9\n2.2\n2.5\n2.8\n3.1\n3.4\n3.7\n\nFields:\n\nλ₁: Specification of λ₁ stretch for the data.\n\nKawabata S, Matsuda M, Tei K, Kawai H. Experimental survey of the strain energy density function of isoprene rubber vulcanizate. Macromolecules. 1981 Jan;14(1):154-62.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Treloar1944Uniaxial-Tuple{}","page":"API","title":"Hyperelastics.Treloar1944Uniaxial","text":"Treloar1944Uniaxial()\n\nUniaxial data for tension of 8% S Rubber at 20C from Fig 3 of Treloar 1944. This is commonly used for testing hyperelastic models.\n\nTreloar LR. Stress-strain data for vulcanized rubber under various types of deformation. Rubber Chemistry and Technology. 1944 Dec;17(4):813-25.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.parameter_bounds-Tuple{Hyperelastics.AbstractHyperelasticModel, Hyperelastics.AbstractHyperelasticTest}","page":"API","title":"Hyperelastics.parameter_bounds","text":"parameter_bounds(ψ::AbstractHyperelasticModel, test::AbstractHyperelasticTest) parameter_bounds(ψ::AbstractHyperelasticModel, tests::Vector{AbstractHyperelasticTest})\n\nReturns a tuple of the parameter bounds provided the experimental data and model\n\nFields\n\nψ: Hyperelastic model\ntest or tests: The test or vector of tests to use in finding the parameter bounds.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.parameters-Tuple{Hyperelastics.AbstractHyperelasticModel}","page":"API","title":"Hyperelastics.parameters","text":"parameters(ψ::AbstractHyperelasticModel)\n\nReturns a tuple of the parameters required for the model\n\nFields\n\nψ: Hyperelastics model\n\n\n\n\n\n","category":"method"},{"location":"API/","page":"API","title":"API","text":"","category":"page"}]
}
