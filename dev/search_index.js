var documenterSearchIndex = {"docs":
[{"location":"example/#Package-Imports","page":"Example","title":"Package Imports","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"using Hyperelastics\nusing Optimization, OptimizationOptimJL\nusing ComponentArrays: ComponentVector\nusing ForwardDiff\nusing CairoMakie, MakiePublication\nset_theme!(theme_latexfonts())","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"For commonly used datasets in hyperelastic modelling, such as the Treloar1944Uniaxial data, functions are available for getting the datasets:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"f = Figure(size = (800,800))\nax = Makie.Axis(f[1,1], xlabel = \"Stretch [-]\", ylabel = \"Stress [kg/cm²]\")\ntreloar_data = Treloar1944Uniaxial()\nscatter!(ax, \n    getindex.(treloar_data.data.λ, 1), \n    getindex.(treloar_data.data.s, 1), \n    label = \"Treloar 1944 Experimental\",\n    color = :black\n)\naxislegend(position = :lt)\nsave(\"treloar_data.png\", f)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Multiple dispatch is used on the corresponding function to calculate the values. Based on the model passed to the function, the correct method will be used in the calculation. StrainEnergyDensity, SecondPiolaKirchoffStressTensor, and CauchyStressTensor accept the deformation state as either the principal components in a vector, [λ₁, λ₂, λ₃] or as the deformation gradient matrix, Fᵢⱼ. The returned value matches the type of the input. Parameters are accessed by field allowing for structs, NamedTuples, or other field-based data-types such as those in ComponentArrays.jl and LabelledArrays.jl. For example, the NeoHookean model is accessed with:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"ψ = NeoHookean()\nλ⃗ = [2.0, sqrt(1/2), sqrt(1/2)]\np = (μ = 10.0, )\nW = StrainEnergyDensity(ψ, λ⃗, p)\nreturn W # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"or","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"F = rand(3,3)\np = (μ = 20.0, )\nW = StrainEnergyDensity(ψ, F, p)\nreturn W # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"A method for creating an OptimizationProblem compatible with Optimization.jl is provided. To fit the NeoHookean model to the Treloar data previously loaded, an additional field-indexed array is used as the initial guess to HyperelasticProblem. It is recommendedto use ComponentArrays.jl for optimization of model parameters.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"prob = HyperelasticProblem(ψ, treloar_data, ComponentVector(μ = 0.2), ad_type = AutoForwardDiff())\nsol = solve(prob, LBFGS())\nreturn sol # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"For fiting multiple models to the same dataset, ","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"models = Dict(\n    Gent => ComponentVector(μ=240e-3, J_m=80.0),\n    EdwardVilgis => ComponentVector(Ns=0.10, Nc=0.20, α=0.001, η=0.001),\n    NeoHookean => ComponentVector(μ=200e-3),\n    Beda => ComponentVector(C1=0.1237, C2=0.0424, C3=7.84e-5, K1=0.0168, α=0.9, β=0.68, ζ=3.015)\n)\n\nsol = Dict{Any, SciMLSolution}()\nfor (ψ, p_0) in models\n    HEProblem = HyperelasticProblem(ψ(), treloar_data, p_0,  ad_type = AutoForwardDiff())\n    sol[ψ] = solve(HEProblem, NelderMead())\nend\nreturn sol # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"To predict the reponse of a model to a proivded dataset and parameters, a predict function is provided:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"f = Figure(size = (800,800))\nax = Makie.Axis(f[1,1], xlabel = \"Stretch [-]\", ylabel = \"Stress [kg/cm²]\")\nfor (ψ, p) in sol\n    pred = predict(ψ(), treloar_data, p.u, ad_type = AutoForwardDiff())\n    lines!(ax, getindex.(pred.data.λ, 1), getindex.(pred.data.s, 1), label=string(ψ))\nend\nscatter!(ax, getindex.(treloar_data.data.λ, 1), getindex.(treloar_data.data.s, 1), label = \"Treloar 1944 Experimental\", color = :black)\naxislegend(position = :lt)\nsave(\"treloar_data_fits.png\", f) # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"While the majority of the models provided by Hyperelastics.jl are based on closed form strain energy density functions, a selection of data-driven models are proivded. For example, the SussmanBathe model is created with:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"using DataInterpolations\nψ = SussmanBathe(treloar_data, k=4, interpolant = QuadraticSpline)\nλ₁ = range(extrema(getindex.(treloar_data.data.λ, 1))..., length = 100)\nuniaxial_prediction = HyperelasticUniaxialTest(λ₁, name = \"Prediction\")\npred = predict(ψ, uniaxial_prediction, [])\nλ₁ = getindex.(treloar_data.data.λ, 1)\ns₁ = getindex.(treloar_data.data.s, 1)\nλ̂₁ = getindex.(pred.data.λ, 1)\nŝ₁ = getindex.(pred.data.s, 1)\n\nf = Figure(size = (800,800))\nax = Makie.Axis(f[1,1], xlabel = \"Stretch [-]\", ylabel = \"Stress [kg/cm²]\")\nlines!(\n    ax, \n    λ̂₁, \n    ŝ₁, \n    label = \"Sussman-Bathe Approximation\"\n)\n\nscatter!(\n        ax,\n        λ₁, \n        s₁, \n        label = \"Treloar 1944 Experimental\",\n        color = :black\n    )\naxislegend(position = :lt)\nsave(\"sussman_bathe.png\", f) # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Hyperelastics","category":"page"},{"location":"#Hyperelastics","page":"Home","title":"Hyperelastics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Hyperelastics.jl relies on ContinuumMechanicsBase.jl for the definitions of key continuum terms. Please cite the package if you use it in your work.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Hyperelastics.jl in Julia >= 1.9, use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Hyperelastics\")","category":"page"},{"location":"#Statement-of-Need","page":"Home","title":"Statement of Need","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development of Hyperelastics.jl began as a study of the accuracy for a variety of material models for a set of experimental data. Often, researchers rely on custom implementations of material models and the data fitting process to find material parameters that match their experimental data. Hyperelastic models can well represent the nonlinear stress-deformation behavior of many biological tissues as well as engineering polymeric materials.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The SEDFs included in this package cover most (if not all) of the available analytical models from the literature to date, from constitutive to phenomelogical models. Furthermore, a selection of data-driven models are incldued as a starting point for the development of new methods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Hyperelastics.jl is part of a spinoff Multi-Scale Material Modelling (M^3) Suite being developed by Vagus LLC (www.vagusllc.com), as a byproduct result of ongoing multi-functional material research being carried out in the Translational Robotics and Controls Engineering Research (TRACER) Lab at Liberty University. A pure Julia implementation allows for the use of automatic differentiation (AD) packages to calculate the partial derivatives of the SEDF. Hyperelastics.jl is designed to leverage multiple-dispatch to define a common set of functions for calculating the SED, Second Piola Kirchoff Stress Tensor, and the Cauchy Stress Tensor. The package provides a set of hyperelastic models and an interface to Optimization.jl for fitting model parameters. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, most commercial finite element codes only offer a limited number, often less than 10, of hyperelastic models which limits the extent to which researchers are able to accurately model a given material. The closest project to Hyperelastics.jl is the matADi project by Andreas Dutzler [@matAdi2023] which has AD support for 18 material models. ","category":"page"},{"location":"#Community-Guidelines","page":"Home","title":"Community Guidelines","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To sustainably develop the package, we will use the established practices from the SciML community for guidlines:","category":"page"},{"location":"","page":"Home","title":"Home","text":"For any issues with or contributions, please open an issue in GitHub or a PR as appropriate.\nPlease refer to the   SciML ColPrac: Contributor's Guide on Collaborative Practices for Community Packages   for guidance on PRs, issues, and other matters relating to contributing.\nSee the SciML Style Guide for common coding practices and other style decisions.","category":"page"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = Hyperelastics","category":"page"},{"location":"API/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"API/#Incompressible-Models","page":"API","title":"Incompressible Models","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [Hyperelastics]\nFilter = x -> typeof(x) === UnionAll && x <:Hyperelastics.AbstractIncompressibleModel","category":"page"},{"location":"API/#Hyperelastics.ABGI-Tuple{}","page":"API","title":"Hyperelastics.ABGI","text":"ABGI(; ℒinv)\n\n\nModel:\n\nW = W_Arruda-Boyce + fracG_en left(sum_i=1^3lambda_i^n-3right)\n\nArguments:\n\nℒinv = TreloarApproximation(): Sets the inverse Langevin approxamationused (default = TreloarApproximation())\n\nParameters:\n\nμ\nN\nGe\nn\n\nMeissner B, Matějka L. A Langevin-elasticity-theory-based constitutiveequation for rubberlike networks and its comparison with biaxialstress–strain data. Part I. Polymer. 2003 Jul 1;44(16):4599-610.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.AffineMicroSphere-Tuple{}","page":"API","title":"Hyperelastics.AffineMicroSphere","text":"AffineMicroSphere(; ℒinv, n)\n\n\nModel:\n\nSee Paper\n\nArguments:\n\nℒinv=TreloarApproximation(): Sets the inverse Langevin approxamation used\nn::Int = 21: Number of quadrature points for the spherical integration\n\nParameters:\n\nμ\nN\n\nMiehe C, Göktepe S, Lulei F. A micro-macro approach to rubber-like materials—part I: the non-affine micro-sphere model of rubber elasticity. Journal of the Mechanics and Physics of Solids. 2004 Nov 1;52(11):2617-60.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Alexander-Tuple{}","page":"API","title":"Hyperelastics.Alexander","text":"Alexander()\n\n\nModel:\n\nW = fracC_1 sqrtpitexterfibig(sqrtk(I_1-3)big)2sqrtk+C_2logfracI_2-3+gammagamma+C_3(I_2-3)\n\nParameters:\n\nμ\nC₁\nC₂\nC₃\nk\nγ\n\nAlexander H. A constitutive relation for rubber-like materials. International Journal of Engineering Science. 1968 Sep 1;6(9):549-63.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Amin-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Amin","text":"Amin()\nAmin(type)\n\n\nModel:\n\nW = C_1 (I_1 - 3) + fracC_2N + 1 (I_1 - 3)^N + 1 + fracC_3M + 1 (I_1 - 3)^M + 1 + C_4 (I_2 - 3)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nC1\nC2\nC3\nC4\nN\nM\n\nAmin AF, Wiraguna SI, Bhuiyan AR, Okui Y. Hyperelasticity model for finite element analysis of natural and high damping rubbers in compression and shear. Journal of engineering mechanics. 2006 Jan;132(1):54-64.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.AnsarriBenam-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.AnsarriBenam","text":"AnsarriBenam(; ...)\nAnsarriBenam(type; n)\n\n\nModel:\n\nW = frac3(n-1)2nmu N leftfrac13N(n-1)(I_1 - 3) - logfracI_1 - 3N3 -3N right\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\nℒinv=TreloarApproximation(): Sets the inverse Langevin approxamation used (default = ``)\nn::Int=3: Sets the order of the model\n\nParameters:\n\nμ\nn\nN\n\nAnssari-Benam A. On a new class of non-Gaussian molecular-based constitutive models with limiting chain extensibility for incompressible rubber-like materials. Mathematics and Mechanics of Solids. 2021 Nov;26(11):1660-74.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ArmanNarooei-Tuple{}","page":"API","title":"Hyperelastics.ArmanNarooei","text":"ArmanNarooei()\n\n\nModel:\n\nW = sumlimits_i=1^N A_ibigexpm_i(lambda_1^alpha_i+lambda_2^alpha_i+lambda_3^alpha_i-3)-1 + B_ibigexpn_i(lambda_1^-beta_i+lambda_2^-beta_i+lambda_3^-beta_i-3)-1\n\nParameters:\n\nA⃗\nB⃗\nm⃗\nn⃗\nα⃗\nβ⃗\n\nNarooei K, Arman M. Modification of exponential based hyperelastic strain energy to consider free stress initial configuration and Constitutive modeling. Journal of Computational Applied Mechanics. 2018 Jun 1;49(1):189-96.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ArrudaBoyce-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.ArrudaBoyce","text":"ArrudaBoyce(; ...)\nArrudaBoyce(type; ℒinv)\n\n\nModel:\n\nW = mu N left( fraclambda_chainsqrtN beta + logleft(fracbetasinhbetaright) right)\n\nwhere\n\nbeta = mathcalL^-1left(fraclambda_chainsqrtNright)\n\nand\n\nlambda_chain = sqrtfracI_13\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\nℒinv=TreloarApproximation(): Sets the inverse Langevin approxamation used\n\nParameters:\n\nμ: Small strain shear modulus\nN: Square of the locking stretch of the network.\n\nArruda EM, Boyce MC. A three-dimensional constitutive model for the large stretch behavior of rubber elastic materials. Journal of the Mechanics and Physics of Solids. 1993 Feb 1;41(2):389-412.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Attard-Tuple{}","page":"API","title":"Hyperelastics.Attard","text":"Attard()\n\n\nModel:\n\nW = sumlimits_i=1^NfracA_i2i(lambda_1^2i+lambda_2^2i+lambda_3^2i-3) + fracB_i2i(lambda_1^-2i+lambda_2^-2i+lambda_3^-2i-3)\n\nParameters:\n\nA⃗\nB⃗\n\nAttard MM, Hunt GW. Hyperelastic constitutive modeling under finite strain. International Journal of Solids and Structures. 2004 Sep 1;41(18-19):5327-50.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.BahremanDarijani-Union{Tuple{}, Tuple{T}} where T<:PrincipalValueForm","page":"API","title":"Hyperelastics.BahremanDarijani","text":"BahremanDarijani()\nBahremanDarijani(type)\n\n\nModel:\n\nW = sumlimits_i = 13sumlimits_j=0^N A_j (lambda_i^m_j-1) + B_j(lambda_i^-n_j-1)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nA2\nB2\nA4\nA6\n\nBahreman M, Darijani H. New polynomial strain energy function; application to rubbery circular cylinders under finite extension and torsion. Journal of Applied Polymer Science. 2015 Apr 5;132(13).\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Beatty-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Beatty","text":"Beatty()\nBeatty(type)\n\n\nModel:\n\nW = -fracG_0 I_m(I_m-3)2(2I_m-3)logbigg(frac1-fracI_1-3I_m-31+fracI_1-3I_m bigg)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nG₀\nIₘ\n\nBeatty MF. On constitutive models for limited elastic, molecular based materials. Mathematics and mechanics of solids. 2008 Jul;13(5):375-87.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Bechir4Term-Tuple{}","page":"API","title":"Hyperelastics.Bechir4Term","text":"Bechir4Term()\n\n\nModel:\n\nW = C_1^1(I_1-3)+sumlimits_n=1^2sumlimits_r=1^2C_n^r(lambda_1^2n+lambda_2^2n+lambda_3^2n-3)^r\n\nParameters:\n\nC11\nC12\nC21\nC22\n\nKhajehsaeid H, Arghavani J, Naghdabadi R. A hyperelastic constitutive model for rubber-like materials. European Journal of Mechanics-A/Solids. 2013 Mar 1;38:144-51.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.BechirChevalier-Tuple{}","page":"API","title":"Hyperelastics.BechirChevalier","text":"BechirChevalier(; ℒinv)\n\n\nModel:\n\nW = W_3Chain(mu_f N_3)+W_8Chain(fracmu_c3 N_8)\n\nwhere:\n\nmu_f = rhosqrtfracI_13N_8\n\nmu_c = bigg(1-fracetaalphasqrtN_3bigg)mu_0\n\nalpha = maxlambda_1 lambda_2 lambda_3\n\nArguments:\n\nℒinv=TreloarApproximation(): Sets the inverse Langevin approxamation used\n\nParameters:\n\nμ₀\nη\nρ\nN₃\nN₈\n\nBechir H, Chevalier L, Idjeri M. A three-dimensional network model for rubber elasticity: The effect of local entanglements constraints. International journal of engineering science. 2010 Mar 1;48(3):265-74.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Beda-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Beda","text":"Beda()\nBeda(type)\n\n\nModel:\n\nW = fracC_1alpha(I_1-3)^alpha+C_2(I_1-3)+fracC_3zeta(I_1-3)^zeta+fracK_1beta(I_2-3)^beta\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nC1\nC2\nC3\nK1\nα\nβ\nζ\n\nBeda T. Reconciling the fundamental phenomenological expression of the strain energy of rubber with established experimental facts. Journal of Polymer Science Part B: Polymer Physics. 2005 Jan 15;43(2):125-34.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Biderman-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Biderman","text":"Biderman()\nBiderman(type)\n\n\nModel:\n\nW = sumlimits_ij=0^3 1C_ij(I_1-3)^i(I_2-3)^j\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nC10\nC01\nC20\nC30\n\nBiderman VL. Calculation of rubber parts. Rascheti na prochnost. 1958;40.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Bootstrapped8Chain-Tuple{}","page":"API","title":"Hyperelastics.Bootstrapped8Chain","text":"Bootstrapped8Chain(; ℒinv)\n\n\nModel:\n\nW = W_8(fracsumlambdasqrt3N-fraclambda_chainsqrtN)+W_8(fraclambda_chainsqrtN)\n\nwhere:\n\nW_8(x) = mu N (x mathcalL^-1(x) + logfracmathcalL^-1(x)sinhmathcalL^-1(x))\n\nand\n\nlambda_chain = sqrtfracI_13\n\nArguments:\n\nℒinv=TreloarApproximation(): Sets the inverse Langevin approximation used.\n\nParameters:\n\nμ\nN\n\nMiroshnychenko D, Green WA, Turner DM. Composite and filament models for the mechanical behaviour of elastomeric materials. Journal of the Mechanics and Physics of Solids. 2005 Apr 1;53(4):748-70. Miroshnychenko D, Green WA. Heuristic search for a predictive strain-energy function in nonlinear elasticity. International Journal of Solids and Structures. 2009 Jan 15;46(2):271-86.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Carroll-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Carroll","text":"Carroll()\nCarroll(type)\n\n\nModel:\n\nW = AI_1+BI_1^4+CsqrtI_2\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nA\nB\nC\n\nCarroll M. A strain energy function for vulcanized rubbers. Journal of Elasticity. 2011 Apr;103(2):173-87.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ChevalierMarco-Union{Tuple{}, Tuple{T}} where T<:PrincipalValueForm","page":"API","title":"Hyperelastics.ChevalierMarco","text":"ChevalierMarco()\nChevalierMarco()\n\n\nModel:\n\nW = intlimits_3^I_1(veclambda) expbigg(sumlimits_i=0^Na_i(I_1-3)^ibigg)textdI_1+ intlimits_3^I_2(veclambda) sumlimits_i=0^nfracb_iI_2^itextdI_2\n\nmathbfS = 2(I-fracpartial Wpartial I_1 - C^-2fracpartial Wpartial I_2)\n\nmathbfsigma = mathbfF cdot mathbfS\n\nParameters:\n\na⃗\nb⃗\n\nNote:\n\nModel is not compatible with AD. A method for accessing the Second Piola Kirchoff Tensor and Cauchy Stress Tensor have been implemented.\n\nChevalier L, Marco Y. Tools for multiaxial validation of behavior laws chosen for modeling hyper‐elasticity of rubber‐like materials. Polymer Engineering & Science. 2002 Feb;42(2):280-98.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ConstrainedJunction-Tuple{}","page":"API","title":"Hyperelastics.ConstrainedJunction","text":"ConstrainedJunction()\n\n\nModel:\n\nW = G_c (I_1-3)+ fracnu k T2left(sumlimits_i=1^3kappafraclambda_i-1lambda_i^2+kappa+logfraclambda_i^2+kappa1+kappa-loglambda_i^2right)\n\nParameters:\n\nGc\nνkT\nκ\n\nFlory PJ, Erman B. Theory of elasticity of polymer networks. 3. Macromolecules. 1982 May;15(3):800-6. Erman B, Flory PJ. Relationships between stress, strain, and molecular constitution of polymer networks. Comparison of theory with experiments. Macromolecules. 1982 May;15(3):806-11.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ContinuumHybrid-Tuple{}","page":"API","title":"Hyperelastics.ContinuumHybrid","text":"ContinuumHybrid()\n\n\nModel:\n\nW = K_1(I_1-3)+K_2logfracI_23+fracmualpha(lambda_1^alpha+lambda_2^alpha+lambda^alpha-3)\n\nParameters:\n\nK₁\nK₂\nα\nμ\n\nBeda T, Chevalier Y. Hybrid continuum model for large elastic deformation of rubber. Journal of applied physics. 2003 Aug 15;94(4):2701-6.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.DavidsonGoulbourne-Tuple{}","page":"API","title":"Hyperelastics.DavidsonGoulbourne","text":"DavidsonGoulbourne()\n\n\nModel:\n\nW = fracG_c I_16-G_clambda_maxlogleft(3lambda_max^2-I_1right)+G_esumlimits_i=1^3left(lambda_i+frac1lambda_iright)\n\nParameters:\n\nGc\nGe\nλmax\n\nDavidson JD, Goulbourne NC. A nonaffine network model for elastomers undergoing finite deformations. Journal of the Mechanics and Physics of Solids. 2013 Aug 1;61(8):1784-97.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.DavisDeThomas-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.DavisDeThomas","text":"DavisDeThomas()\nDavisDeThomas(type)\n\n\nModel:\n\nW = fracA2(1-fracn2)(I_1-3+C^2)^1-fracn2+k(I_1-3)^2\n\nArguments\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nA\nn\nC\nk\n\nDavies CK, De DK, Thomas AG. Characterization of the behavior of rubber for engineering design purposes. 1. Stress-strain relations. Rubber chemistry and technology. 1994 Sep;67(4):716-28.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.EdwardVilgis-Tuple{}","page":"API","title":"Hyperelastics.EdwardVilgis","text":"EdwardVilgis()\n\n\nModel:\n\nW = frac12N_CBiggfrac(1-alpha^2)I_11-alpha^2I_1+log(1-alpha^2I_1)Bigg+frac12N_SBiggsum_i=1^3Bigfrac(1+eta)(1-alpha^2)lambda_i^2( 1+etalambda_i^2)(1-alpha^2I_1)+log(1+etalambda_i^2)Big+log(1-alpha^2I_1)Bigg\n\nParameters:\n\nNs: Number of sliplinks\nNc: Number of crosslinks\nα: A measure of chain inextensibility\nη: A measure of the amount of chain slippage\n\nNote:\n\nSince α and η result from the same mechanism, they should be of approximately the same order of magnitude. Large differences between the two may indicate an issue with the optimizer or initial guess.\n\nEdwards SF, Vilgis T. The effect of entanglements in rubber elasticity. Polymer. 1986 Apr 1;27(4):483-92.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ExpLn-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.ExpLn","text":"ExpLn()\nExpLn(type)\n\n\nModel:\n\nW = Abiggfrac1aexp(a(I_1-3))+b(I_1-2)(1-logI_1-2)-frac1a-bbigg\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nA\na\nb\n\nKhajehsaeid H, Arghavani J, Naghdabadi R. A hyperelastic constitutive model for rubber-like materials. European Journal of Mechanics-A/Solids. 2013 Mar 1;38:144-51.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ExtendedTubeModel-Tuple{}","page":"API","title":"Hyperelastics.ExtendedTubeModel","text":"ExtendedTubeModel()\n\n\nModel:\n\nW = fracG_c2biggfrac(1-delta^2)(I_1-3)1-delta^2(I_1-3)+log(1-delta^2(I_1-3))bigg+frac2G_ebeta^2sumlimits_i=1^3(lambda_i^-beta-1)\n\nParameters:\n\nGc\nGe\nδ\nβ\n\nKaliske M, Heinrich G. An extended tube-model for rubber elasticity: statistical-mechanical theory and finite element implementation. Rubber Chemistry and Technology. 1999 Sep;72(4):602-32.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.FullNetwork-Tuple{}","page":"API","title":"Hyperelastics.FullNetwork","text":"FullNetwork(; ℒinv)\n\n\nModel:\n\nW = (1-rho)W_3Chain+rho W_8chain\n\nArguments:\n\nℒinv=TreloarApproximation(): Sets the inverse Langevin approxamation used\n\nParameters:\n\nμ\nN\nρ\n\nTreloar LR, Riding G. A non-Gaussian theory for rubber in biaxial strain. I. Mechanical properties. Proceedings of the Royal Society of London. A. Mathematical and Physical Sciences. 1979 Dec 31;369(1737):261-80. Wu PD, van der Giessen E. On improved 3-D non-Gaussian network models for rubber elasticity. Mechanics research communications. 1992 Sep 1;19(5):427-33. Wu PD, Van Der Giessen E. On improved network models for rubber elasticity and their applications to orientation hardening in glassy polymers. Journal of the Mechanics and Physics of Solids. 1993 Mar 1;41(3):427-56.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.FungDemiray-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.FungDemiray","text":"FungDemiray()\nFungDemiray(type)\n\n\nModel:\n\nW = fracmu2 * b (exp(b(I_1 - 3)) - 1)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nμ\nb\n\nFung YC. Elasticity of soft tissues in simple elongation. American Journal of Physiology-Legacy Content. 1967 Dec 1;213(6):1532-44. Demiray H. A note on the elasticity of soft biological tissues. Journal of biomechanics. 1972 May 1;5(3):309-11.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.GenYeoh-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.GenYeoh","text":"GenYeoh()\nGenYeoh(type)\n\n\nModel:\n\nW = K_1 (I_1 - 3)^m + K_2 * (I_1 - 3)^p + K_3 * (I_1 - 3)^q\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nK1\nK2\nK3\nm\np\nq\n\nHohenberger TW, Windslow RJ, Pugno NM, Busfield JJ. A constitutive model for both low and high strain nonlinearities in highly filled elastomers and implementation with user-defined material subroutines in ABAQUS. Rubber Chemistry and Technology. 2019;92(4):653-86.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.GeneralConstitutiveModel-Tuple{}","page":"API","title":"Hyperelastics.GeneralConstitutiveModel","text":"GeneralConstitutiveModel()\n\n\nModel:\n\nW = G_c N logbigg(frac3N+frac12I_13N-I_1bigg)+G_esumlimits_i=1^3frac1lambda_I\n\nParameters:\n\nGc\nGe\nN\n\nXiang Y, Zhong D, Wang P, Mao G, Yu H, Qu S. A general constitutive model of soft elastomers. Journal of the Mechanics and Physics of Solids. 2018 Aug 1;117:110-22.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Gent-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Gent","text":"Gent()\nGent(type)\n\n\nModel:\n\nW = -fracmu J_m2logbigg(1-fracI_1-3J_mbigg)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nμ:  Small strain shear modulus\nJₘ: Limiting stretch invariant\n\nGent AN. A new constitutive relation for rubber. Rubber chemistry and technology. 1996 Mar;69(1):59-61.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.GentThomas-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.GentThomas","text":"GentThomas()\nGentThomas(type)\n\n\nModel:\n\nW = C_1(I_1-3)+C_2log(fracI_23)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParamters:\n\nC1\nC2\n\nGent AN, Thomas AG. Forms for the stored (strain) energy function for vulcanized rubber. Journal of Polymer Science. 1958 Apr;28(118):625-8.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.GornetDesmorat-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.GornetDesmorat","text":"GornetDesmorat()\nGornetDesmorat(type)\n\n\nModel:\n\nW = h_1intexph_3(I_1-3)^2textdI_1+3h_2intfrac1sqrtI_2textdI_2 = frach_1 sqrtpi texterfi(sqrth_3(I_1-3)^2)2sqrth_3+6h_2sqrtI_2\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nh₁\nh₂\nh₃\n\nNotes:\n\nThe differential form was original form and the closed form SEF was determine via symbolic integration in Mathematica. The model is not compatible with AD and has methods for the Second Piola Kirchoff Stress Tensor and Cauchy Stress Tensor implemented.\n\nGornet L, Marckmann G, Desmorat R, Charrier P. A new isotropic hyperelastic strain energy function in terms of invariants and its derivation into a pseudo-elastic model for Mullins effect: application to finite element analysis. Constitutive Models for Rubbers VII. 2012:265-71.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Gregory-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Gregory","text":"Gregory()\nGregory(type)\n\n\nModel:\n\nW = fracA2-n(I_1-3+C^2)^1-fracn2+fracB2+m(I_1-3+C^2)^1+fracm2\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nA\nB\nC\nm\nn\n\nGregory IH, Muhr AH, Stephens IJ. Engineering applications of rubber in simple extension. Plastics rubber and composites processing and applications. 1997;26(3):118-22.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HainesWilson-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.HainesWilson","text":"HainesWilson()\nHainesWilson(type)\n\n\nModel:\n\nW = sumlimits_ij=0^3 2C_ij(I_1-3)^i(I_2-3)^j\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nC10\nC01\nC11\nC02\nC20\nC30\n\nHaines DW, Wilson WD. Strain-energy density function for rubberlike materials. Journal of the Mechanics and Physics of Solids. 1979 Aug 1;27(4):345-60.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HartSmith-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.HartSmith","text":"HartSmith()\nHartSmith(type)\n\n\nModel:\n\nW = fracGexp(-9k_1+k_1I_1)k_1+Gk_2logI_2\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nG\nk₁\nk₂\n\nHart-Smith LJ. Elasticity parameters for finite deformations of rubber-like materials. Zeitschrift für angewandte Mathematik und Physik ZAMP. 1966 Sep;17(5):608-26.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HartmannNeff-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.HartmannNeff","text":"HartmannNeff()\nHartmannNeff(type)\n\n\nModel:\n\nW = sumlimits_ij=0^MNC_i0(I_1-3)^i -3sqrt3^j+alpha(I_1-3)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nα\nCi⃗0\nC0j⃗\n\nHartmann S, Neff P. Polyconvexity of generalized polynomial-type hyperelastic strain energy functions for near-incompressibility. International journal of solids and structures. 2003 Jun 1;40(11):2767-91.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HauptSedlan-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.HauptSedlan","text":"HauptSedlan()\nHauptSedlan(type)\n\n\nModel:\n\nW = sumlimits_ij=0^3 2C_ij(I_1-3)^i(I_2-3)^j\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nC10\nC01\nC11\nC02\nC30\n\nHaupt P, Sedlan K. Viscoplasticity of elastomeric materials: experimental facts and constitutive modelling. Archive of Applied Mechanics. 2001 Mar;71(2):89-109.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HorganMurphy-Tuple{}","page":"API","title":"Hyperelastics.HorganMurphy","text":"HorganMurphy()\n\n\nModel:\n\nW = -frac2mu J_mc^2logleft(1-fraclambda_1^c+lambda_2^c+lambda_3^c-3J_mright)\n\nParameters:\n\nμ\nJₘ\nc\n\nHorgan CO, Murphy JG. Limiting chain extensibility constitutive models of Valanis–Landel type. Journal of Elasticity. 2007 Feb;86(2):101-11.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HorganSaccomandi-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.HorganSaccomandi","text":"HorganSaccomandi()\nHorganSaccomandi(type)\n\n\nModel:\n\nW = -fracmu J2logbigg(fracJ^3-J^2I_1+JI_2-1(J-1)^3bigg)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nμ\nJ\n\nHorgan CO, Saccomandi G. Constitutive models for compressible nonlinearly elastic materials with limiting chain extensibility. Journal of Elasticity. 2004 Nov;77(2):123-38.> Horgan CO, Saccomandi G. Constitutive models for atactic elastomers. InWaves And Stability In Continuous Media 2004 (pp. 281-294).\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HossMarczakI-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.HossMarczakI","text":"HossMarczakI()\nHossMarczakI(type)\n\n\nModel:\n\nW = fracalphabeta(1-exp-beta(I_1-3))+fracmu2bbigg((1+fracbn(I_1-3))^n -1bigg)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nα\nβ\nμ\nb\nn\n\nNote:\n\nThe authors suggested this model for low strains.\n\nHoss L, Marczak RJ. A new constitutive model for rubber-like materials. Mecánica Computacional. 2010;29(28):2759-73.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HossMarczakII-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.HossMarczakII","text":"HossMarczakII()\nHossMarczakII(type)\n\n\nModel:\n\nW = fracalphabeta(1-exp-beta(I_1-3))+fracmu2bbigg((1+fracbn(I_1-3))^n -1bigg)+C_2log(fracI_23)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nα\nβ\nμ\nb\nn\nC2\n\nNote:\n\nThe authors suggests this model for high strains.\n\nHoss L, Marczak RJ. A new constitutive model for rubber-like materials. Mecánica Computacional. 2010;29(28):2759-73.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Isihara-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Isihara","text":"Isihara()\nIsihara(type)\n\n\nModel:\n\nW = sumlimits_ij=0^2 1C_ij(I_1-3)^i(I_2-3)^j\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nC10\nC20\nC01\n\nIsihara A, Hashitsume N, Tatibana M. Statistical theory of rubber‐like elasticity. IV.(two‐dimensional stretching). The Journal of Chemical Physics. 1951 Dec;19(12):1508-12.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.JamesGreenSimpson-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.JamesGreenSimpson","text":"JamesGreenSimpson()\nJamesGreenSimpson(type)\n\n\nModel:\n\nW = sumlimits_ij=0^3 1C_ij(I_1-3)^i(I_2-3)^j\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nC10\nC01\nC11\nC20\nC30\n\nJames AG, Green A, Simpson GM. Strain energy functions of rubber. I. Characterization of gum vulcanizates. Journal of Applied Polymer Science. 1975 Jul;19(7):2033-58.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.KhiemItskov-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.KhiemItskov","text":"KhiemItskov()\nKhiemItskov(type)\n\n\nModel:\n\nW = mu_c kappa n logbigg(fracsin(fracpisqrtn)(fracI_13)^fracq2sin(fracpisqrtn(fracI_13)^fracq2bigg)+mu_tbigfracI_23^12 - 1 big\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nμcκ\nn\nq\nμt\n\nKhiêm VN, Itskov M. Analytical network-averaging of the tube model:: Rubber elasticity. Journal of the Mechanics and Physics of Solids. 2016 Oct 1;95:254-69.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Knowles-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Knowles","text":"Knowles()\nKnowles(type)\n\n\nModel:\n\nW = fracmu2bleft(left(1+fracbn(I_1-3)right)^n-1right)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nμ\nb\nn\n\nKnowles JK. The finite anti-plane shear field near the tip of a crack for a class of incompressible elastic solids. International Journal of Fracture. 1977 Oct;13(5):611-39.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.LambertDianiRey-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.LambertDianiRey","text":"LambertDianiRey()\nLambertDianiRey(type)\n\n\nModel:\n\nW = intlimits_3^I_1expbigg(sumlimits_i=0^na_i(I_1-3)^ibigg)textdI_1+intlimits_3^I_2sumlimits_j=0^mb_ilog(I_2)^itextdI_2\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\na⃗\nb⃗\n\nLambert-Diani J, Rey C. New phenomenological behavior laws for rubbers and thermoplastic elastomers. European Journal of Mechanics-A/Solids. 1999 Nov 1;18(6):1027-43.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Lim-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Lim","text":"Lim(; ...)\nLim(type; ℒinv)\n\n\nModel:\n\nW = left(1-fleft(fracI_1-3hatI_1-3right)right)W_NeoHookean(μ₁)+fW_ArrudaBoyce(μ₂ N)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\nℒinv=TreloarApproximation(): Sets the inverse Langevin approxamation used\n\nParameters:\n\nμ₁\nμ₂\nN\nÎ₁\n\nLim GT. Scratch behavior of polymers. Texas A&M University; 2005.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Lion-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Lion","text":"Lion()\nLion(type)\n\n\nModel:\n\nW = sumlimits_ij=0^51C_ij(I_1-3)^i(I_2-3)^j\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nC10\nC01\nC50\n\nLion A. On the large deformation behaviour of reinforced rubber at different temperatures. Journal of the Mechanics and Physics of Solids. 1997 Nov 1;45(11-12):1805-34.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.LopezPamies-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.LopezPamies","text":"LopezPamies()\nLopezPamies(type)\n\n\nModel:\n\nW = frac3^1 - alpha_i2alpha_i mu_i (I_1^alpha_i - 3^alpha_i)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nα⃗\nμ⃗\n\nLopez-Pamies O. A new I1-based hyperelastic model for rubber elastic materials. Comptes Rendus Mecanique. 2010 Jan 1;338(1):3-11.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.MCC-Tuple{}","page":"API","title":"Hyperelastics.MCC","text":"MCC()\n\n\nModel:\n\nW = frac12zeta k T sumlimits_i=1^3(lambda_i^2-1)+frac12mu k Tsumlimits_i=1^3B_i+D_i-log(1+B_i)-log(1+D_i)\n\nwhere:\n\nB_i = frackappa^2(lambda_i^2-1)(lambda_i^2+kappa)^2\n\nand\n\nD_i = fraclambda_i^2 B_ikappa\n\nParameters:\n\nζkT\nμkT\nκ\n\nErman B, Monnerie L. Theory of elasticity of amorphous networks: effect of constraints along chains. Macromolecules. 1989 Aug;22(8):3342-8.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.MansouriDarijani-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.MansouriDarijani","text":"MansouriDarijani()\nMansouriDarijani(type)\n\n\nModel:\n\nW = A_1expm_1(I_1-3)-1+B_1expn_1(I_2-3)-1\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nA1\nm1\nB1\nn1\n\nMansouri MR, Darijani H. Constitutive modeling of isotropic hyperelastic materials in an exponential framework using a self-contained approach. International Journal of Solids and Structures. 2014 Dec 1;51(25-26):4316-26.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ModifiedFloryErman-Tuple{}","page":"API","title":"Hyperelastics.ModifiedFloryErman","text":"ModifiedFloryErman(; ℒinv)\n\n\nModel:\n\nW = W_textArruda-Boyce+sumlimits_i=1^3fracmu2B_i+D_i\n\nArguments:\n\nℒinv=TreloarApproximation(): Sets the inverse Langevin approxamation used\n\nParameters:\n\nμ\nN\nκ\n\nEdwards SF. The statistical mechanics of polymerized material. Proceedings of the Physical Society (1958-1967). 1967 Sep 1;92(1):9.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ModifiedGregory-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.ModifiedGregory","text":"ModifiedGregory()\nModifiedGregory(type)\n\n\nModel:\n\nW = fracA1+alpha(I_1-3+M^2)^1+alpha+fracB1+beta(I_1-3+N^2)^1+beta\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nA\nα\nM\nB\nβ\nN\n\nHe H, Zhang Q, Zhang Y, Chen J, Zhang L, Li F. A comparative study of 85 hyperelastic constitutive models for both unfilled rubber and highly filled rubber nanocomposite material. Nano Materials Science. 2021 Jul 16.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ModifiedYeoh-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.ModifiedYeoh","text":"ModifiedYeoh()\nModifiedYeoh(type)\n\n\nModel:\n\nW = C_10 * (I_1 - 3) + C_20 * (I_1 - 3)^2 + C_30 * (I_1 - 3)^3 + alpha  beta * (1 - exp-beta * (I_1 - 3))\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nC10\nC20\nC30\nα\nβ\n\nHe H, Zhang Q, Zhang Y, Chen J, Zhang L, Li F. A comparative study of 85 hyperelastic constitutive models for both unfilled rubber and highly filled rubber nanocomposite material. Nano Materials Science. 2021 Jul 16.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.MooneyRivlin-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.MooneyRivlin","text":"MooneyRivlin()\nMooneyRivlin(type)\n\n\nModel:\n\nW = C_10(I_1-3)+C_01(I_2-3)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nC01\nC10\n\nMooney M. A theory of large elastic deformation. Journal of applied physics. 1940 Sep;11(9):582-92.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.NeoHookean-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.NeoHookean","text":"NeoHookean()\nNeoHookean(type)\n\n\nModel:\n\nW = fracmu2(I_1-3)\n\nArguments\n\ntype = PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nμ: Small strain shear modulus\n\nTreloar LR. The elasticity of a network of long-chain molecules—II. Transactions of the Faraday Society. 1943;39:241-6.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.NonaffineMicroSphere-Tuple{}","page":"API","title":"Hyperelastics.NonaffineMicroSphere","text":"NonaffineMicroSphere(; ℒinv, n)\n\n\nModel: See Paper\n\nArguments:\n\nℒinv=CohenRounded3_2(): Sets the inverse Langevin approximation used.\nn=21: Order of quadrature for spherical integration\n\nParameters:\n\nμ: Small strain shear modulus\nN: Number of chain segments\np: Non-affine stretch parameter\nU: Tube geometry parameter\nq: Non-affine tube parameter\n\nMiehe C, Göktepe S, Lulei F. A micro-macro approach to rubber-like materials—part I: the non-affine micro-sphere model of rubber elasticity. Journal of the Mechanics and Physics of Solids. 2004 Nov 1;52(11):2617-60.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.NonaffineTube-Tuple{}","page":"API","title":"Hyperelastics.NonaffineTube","text":"NonaffineTube()\n\n\nModel:\n\nW = G_c sumlimits_i=1^3fraclambda_i^22+G_esumlimits_i=1^3lambda_i+frac1lambda_i\n\nParameters:\n\nGc\nGe\n\nRubinstein M, Panyukov S. Nonaffine deformation and elasticity of polymer networks. Macromolecules. 1997 Dec 15;30(25):8036-44.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Ogden-Tuple{}","page":"API","title":"Hyperelastics.Ogden","text":"Ogden()\n\n\nModel:\n\nW = sumlimits_i=1^Nfracmu_ialpha_i(lambda_1^alpha_i+lambda_2^alpha_i+lambda_3^alpha_i-3)\n\nParameters:\n\nμ⃗\nα⃗\n\nOgden RW. Large deformation isotropic elasticity–on the correlation of theory and experiment for incompressible rubberlike solids. Proceedings of the Royal Society of London. A. Mathematical and Physical Sciences. 1972 Feb 1;326(1567):565-84.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.PengLandel-Tuple{}","page":"API","title":"Hyperelastics.PengLandel","text":"PengLandel()\n\n\nModel:\n\nW = Esumlimits_i=1^3bigglambda_i - 1 - log(lambda_i) - frac16log(lambda_i)^2 + frac118log(lambda_i)^3-frac1216log(lambda_i)^4bigg\n\nParameters:\n\nE\n\nPeng TJ, Landel RF. Stored energy function of rubberlike materials derived from simple tensile data. Journal of Applied Physics. 1972 Jul;43(7):3064-7.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.PucciSaccomandi-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.PucciSaccomandi","text":"PucciSaccomandi()\nPucciSaccomandi(type)\n\n\nModel:\n\nW = KlogfracI_23-fracmu J_m2log1-fracI_1-3J-m\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nK\nμ\nJₘ\n\nPucci E, Saccomandi G. A note on the Gent model for rubber-like materials. Rubber chemistry and technology. 2002 Nov;75(5):839-52.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Shariff-Tuple{}","page":"API","title":"Hyperelastics.Shariff","text":"Shariff()\n\n\nModel:\n\nW = Esumlimits_i=1^3sumlimits_j=1^Nalpha_j Phi_j(lambda_i)\n\nParameters:\n\nE\nα⃗\n\nShariff MH. Strain energy function for filled and unfilled rubberlike material. Rubber chemistry and technology. 2000 Mar;73(1):1-8.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Swanson-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Swanson","text":"Swanson()\nSwanson(type)\n\n\nModel:\n\nW = sumlimits_i=1^N frac32(fracA_i1+alpha_i(fracI_13)^1+alpha_i+fracB_i1+beta_i(fracI_23)^1+beta_i\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nA⃗\nα⃗\nB⃗\nβ⃗\n\nSwanson SR. A constitutive model for high elongation elastic materials.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.TakamizawaHayashi-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.TakamizawaHayashi","text":"TakamizawaHayashi()\nTakamizawaHayashi(type)\n\n\nModel:\n\nW = -clogleft1-left(fracI_1-3J_mright)^2right\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nc\nJₘ\n\nTakamizawa K, Hayashi K. Strain energy density function and uniform strain hypothesis for arterial mechanics. Journal of biomechanics. 1987 Jan 1;20(1):7-17.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ThreeChainModel-Tuple{}","page":"API","title":"Hyperelastics.ThreeChainModel","text":"ThreeChainModel(; ℒinv)\n\n\nModel:\n\nW = fracmusqrtN3sumlimits_i=1^3bigg(lambda_ibeta_i+sqrtNlogbigg(fracbeta_isinh beta_ibigg)bigg)\n\nArguments:\n\nℒinv=TreloarApproximation(): Sets the inverse Langevin approxamation used\n\nParameters:\n\nμ: Small strain shear modulus\nN: Square of the locking stretch of the network.\n\nJames HM, Guth E. Theory of the elastic properties of rubber. The Journal of Chemical Physics. 1943 Oct;11(10):455-81.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Tube-Tuple{}","page":"API","title":"Hyperelastics.Tube","text":"Tube()\n\n\nModel:\n\nW = sumlimits_i=1^3fracG_c2(lambda_i^2-1)+frac2Gebeta^2(lambda_i^-beta-1)\n\nParameters:\n\nGc\nGe\nβ\n\nHeinrich G, Kaliske M. Theoretical and numerical formulation of a molecular based constitutive tube-model of rubber elasticity. Computational and Theoretical Polymer Science. 1997 Jan 1;7(3-4):227-41.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ValanisLandel-Tuple{}","page":"API","title":"Hyperelastics.ValanisLandel","text":"ValanisLandel()\n\n\nModel:\n\nW = 2musumlimits_1^3(lambda_i(loglambda_i -1))\n\nParameters:\n\nμ\n\nValanis KC, Landel RF. The strain‐energy function of a hyperelastic material in terms of the extension ratios. Journal of Applied Physics. 1967 Jun;38(7):2997-3002.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.VanDerWaals-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.VanDerWaals","text":"VanDerWaals()\nVanDerWaals(type)\n\n\nModel:\n\nW = -mu(lambda_m^2-3)log(1-Theta)+Theta-frac2alpha3bigg(fracI-32bigg)^32\n\nwhere:\n\nTheta = fracbeta I_1 + (1-beta)I_2-3lambda_m^2-3)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nμ\nλm\nβ\nα\n\nKilian HG, Enderle HF, Unseld K. The use of the van der Waals model to elucidate universal aspects of structure-property relationships in simply extended dry and swollen rubbers. Colloid and Polymer Science. 1986 Oct;264(10):866-76. Ambacher H, Enderle HF, Kilian HG, Sauter A. Relaxation in permanent networks. InRelaxation in Polymers 1989 (pp. 209-220). Steinkopff. Kilian HG. A molecular interpretation of the parameters of the van der Waals equation of state for real networks. Polymer Bulletin. 1980 Sep;3(3):151-8.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.VerondaWestmann-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.VerondaWestmann","text":"VerondaWestmann()\nVerondaWestmann(type)\n\n\nModel:\n\nW = C_1 (exp(alpha(I_1 - 3)) - 1) + C_2 (I_2 - 3)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nC1\nC2\nα\n\nVeronda DR, Westmann RA. Mechanical characterization of skin—finite deformations. Journal of biomechanics. 1970 Jan 1;3(1):111-24.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Vito-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Vito","text":"Vito()\nVito(type)\n\n\nModel:\n\nW = alpha (expbigg(beta (I_1 - 3)bigg) + gamma  (I_2 - 3)) - 1)\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nα\nβ\nγ\n\nVito R. A note on arterial elasticity. Journal of Biomechanics. 1973 Sep 1;6(5):561-4.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.YamashitaKawabata-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.YamashitaKawabata","text":"YamashitaKawabata()\nYamashitaKawabata(type)\n\n\nModel:\n\nW = C_1(I_1-3)+C_2(I_2-3)+fracC_3N+1(I_1-3)^N+1\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nC1\nC2\nC3\nN\n\nYamashita Y, Kawabata S. Approximated form of the strain energy-density function of carbon-black filled rubbers for industrial applications. Nippon Gomu Kyokaishi(Journal of the Society of Rubber Industry, Japan)(Japan). 1992;65(9):517-28.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Yeoh-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Yeoh","text":"Yeoh()\nYeoh(type)\n\n\nModel:\n\nW = sumlimits_ij=0^3 0C_ij(I_1-3)^i(I_2-3)^j\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nC10\nC20\nC30\n\nYeoh OH. Characterization of elastic properties of carbon-black-filled rubber vulcanizates. Rubber chemistry and technology. 1990 Nov;63(5):792-805.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.YeohFleming-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.YeohFleming","text":"YeohFleming()\nYeohFleming(type)\n\n\nModel:\n\nW = fracAB(1-exp-B(I_1-3)) - C_10(I_m-3)log1-fracI_1-3I_m-3\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or `InvariantForm()\n\nParameters:\n\nA\nB\nC10\nIm\n\nYeoh OH, Fleming PD. A new attempt to reconcile the statistical and phenomenological theories of rubber elasticity. Journal of Polymer Science Part B: Polymer Physics. 1997 Sep 15;35(12):1919-31.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Zhao-Union{Tuple{}, Tuple{T}} where T<:Union{InvariantForm, PrincipalValueForm}","page":"API","title":"Hyperelastics.Zhao","text":"Zhao()\nZhao(type)\n\n\nModel:\n\nW = C_-1^1*(I_2-3)+C_1^1(I_1-3)+C_2^1(I_1^2-2I_2-3)+C_2^2(I_1^2-2I_2-3)^2\n\nArguments:\n\ntype=PrincipalValueForm(): Sets the form of the strain energy density function. Either PrincipalValueForm() or InvariantForm()\n\nParameters:\n\nC₋₁¹\nC₁¹\nC₂¹\nC₂²\n\nZhao Z, Mu X, Du F. Modeling and verification of a new hyperelastic modelfor rubber-like materials. Mathematical Problems in Engineering. 2019 May 22019.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.ZunigaBeatty-Tuple{}","page":"API","title":"Hyperelastics.ZunigaBeatty","text":"ZunigaBeatty(; ℒinv)\n\n\nModel:\n\nW = sqrtfracN_3+N_82N_3W_3Chain+sqrtfracI_13N_8W_8Chain\n\nArguments:\n\nℒinv=TreloarApproximation(): Sets the inverse Langevin approxamation used\n\nParameters:\n\nμ\nN₃\nN₈\n\nElı́as-Zúñiga A, Beatty MF. Constitutive equations for amended non-Gaussian network models of rubber elasticity. International journal of engineering science. 2002 Dec 1;40(20):2265-94.\n\n\n\n\n\n","category":"method"},{"location":"API/#Compressible-Models","page":"API","title":"Compressible Models","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [Hyperelastics]\nFilter = x -> typeof(x) === UnionAll && x <:Hyperelastics.AbstractCompressibleModel","category":"page"},{"location":"API/#Data-Driven-Models","page":"API","title":"Data Driven Models","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [Hyperelastics]\nFilter = x -> typeof(x) === UnionAll && x <:Hyperelastics.AbstractDataDrivenHyperelasticModel","category":"page"},{"location":"API/#Hyperelastics.DataDrivenAverageChainBehavior-Tuple{HyperelasticUniaxialTest}","page":"API","title":"Hyperelastics.DataDrivenAverageChainBehavior","text":"DataDrivenAverageChainBehavior(data; fchain)\n\n\nModel:\n\nAdapted from the code provided in the article's supplementary material\n\nParameters:\n\nNone\n\nFields:\n\ndata: A Uniaxial Hyperelastic Test\nfchain(λch, pch): A constructor for an approximation with the form f(x, y) => f̂(x) = y\n\nAmores VJ, Benítez JM, Montáns FJ. Average-chain behavior of isotropic incompressible polymers obtained from macroscopic experimental data. A simple structure-based WYPiWYG model in Julia language. Advances in Engineering Software. 2019 Apr 1;130:41-57.\n\nAmores VJ, Benítez JM, Montáns FJ. Data-driven, structure-based hyperelastic manifolds: A macro-micro-macro approach to reverse-engineer the chain behavior and perform efficient simulations of polymers. Computers & Structures. 2020 Apr 15;231:106209.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.SussmanBathe-Tuple{HyperelasticUniaxialTest}","page":"API","title":"Hyperelastics.SussmanBathe","text":"SussmanBathe(data; interpolant, k)\n\n\nModel:\n\nSee paper\n\nParameters:\n\nNone\n\nFields:\n\ndata: Hyperelastic Uniaxial test to be used for determining the interpolation\nk: Order of the summation in the model.\ninterpolant: Function of the form, f(s, λ) which returns a function f(λ) = s\n\nSussman T, Bathe KJ. A model of incompressible isotropic hyperelastic material behavior using spline interpolations of tension–compression test data. Communications in numerical methods in engineering. 2009 Jan;25(1):53-63.\n\n\n\n\n\n","category":"method"},{"location":"API/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [Hyperelastics]\nOrder = [:function]","category":"page"},{"location":"API/#ContinuumMechanicsBase.CauchyStressTensor-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Vector{R}, Any}} where {T<:PrincipalValueForm, R}","page":"API","title":"ContinuumMechanicsBase.CauchyStressTensor","text":"CauchyStressTensor(\n    ψ::Hyperelastics.AbstractHyperelasticModel{T<:PrincipalValueForm},\n    λ⃗::Array{R, 1},\n    p;\n    kwargs...\n) -> Any\n\n\nReturns the Cauchy stress tensor for the hyperelastic model ψ with the principle stretches λ⃗ with parameters p.\n\nArguments:\n\nψ::AbstractHyperelasticModel: Hyperelastic model\nλ⃗::Vector: Vector of principal stretches\np: Model parameters\nad_type: Automatic differentiation backend (see ADTypes.jl)\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.CauchyStressTensor-Union{Tuple{S}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Matrix{S}, Any}} where {T<:PrincipalValueForm, S}","page":"API","title":"ContinuumMechanicsBase.CauchyStressTensor","text":"CauchyStressTensor(\n    ψ::Hyperelastics.AbstractHyperelasticModel{T<:PrincipalValueForm},\n    F::Array{S, 2},\n    p;\n    kwargs...\n)\n\n\nReturns the Cauchy stress tensor for the hyperelastic model ψ with the deformation gradient F with parameters p.\n\nArguments:\n\nψ::AbstractHyperelasticModel: Hyperelastic model\nF::Matrix: Deformation gradient matrix\np: Model parameters\nad_type: Automatic differentiation backend (see ADTypes.jl)\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.I₁-Tuple{AbstractVector}","page":"API","title":"ContinuumMechanicsBase.I₁","text":"I₁(λ⃗)\n\n\nFirst stretch invariant - Currently requires the addition of 5 times the machine precision to allow AD to work correctly\n\nI_1(veclambda) = lambda_1^2+lambda_2^2+lambda_3^2 + 5varepsilon\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.I₂-Tuple{AbstractVector}","page":"API","title":"ContinuumMechanicsBase.I₂","text":"I₂(λ⃗)\n\n\nSecond Stretch invariant\n\nI_2(veclambda) = lambda_1^-2+lambda_2^-2+lambda_3^-2\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.I₃-Tuple{AbstractVector}","page":"API","title":"ContinuumMechanicsBase.I₃","text":"I₃(λ⃗)\n\n\nThird Stretch invariant\n\nI_3(veclambda) = (lambda_1lambda_2lambda_3)^2\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.J-Tuple{AbstractVector}","page":"API","title":"ContinuumMechanicsBase.J","text":"J(λ⃗)\n\n\nVolumetric Stretch\n\nJ(veclambda) = lambda_1lambda_2lambda_3\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.SecondPiolaKirchoffStressTensor-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Matrix{R}, Any}} where {T<:PrincipalValueForm, R}","page":"API","title":"ContinuumMechanicsBase.SecondPiolaKirchoffStressTensor","text":"SecondPiolaKirchoffStressTensor(\n    ψ::Hyperelastics.AbstractHyperelasticModel{T<:PrincipalValueForm},\n    F::Array{R, 2},\n    p;\n    kwargs...\n) -> Any\n\n\nReturns the second PK stress tensor for the hyperelastic model ψ with the deformation gradient F with parameters p.\n\nArguments:\n\nψ::AbstractHyperelasticModel: Hyperelastic model\nF::Matrix: Deformation gradient matrix\np: Model parameters\nad_type: Automatic differentiation backend (see ADTypes.jl)\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.SecondPiolaKirchoffStressTensor-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Vector{R}, Any}} where {T<:PrincipalValueForm, R}","page":"API","title":"ContinuumMechanicsBase.SecondPiolaKirchoffStressTensor","text":"SecondPiolaKirchoffStressTensor(\n    ψ::Hyperelastics.AbstractHyperelasticModel{T<:PrincipalValueForm},\n    λ⃗::Array{R, 1},\n    p;\n    ad_type,\n    kwargs...\n) -> Any\n\n\nReturns the second PK stress tensor for the hyperelastic model ψ with the principle stretches λ⃗ with parameters p.\n\nArguments:\n\nψ::AbstractHyperelasticModel: Hyperelastic model\nλ⃗::Vector: Vector of principal stretches\np: Model parameters\nad_type: Automatic differentiation backend (see ADTypes.jl)\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.StrainEnergyDensity-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Matrix{R}, Any}} where {T<:PrincipalValueForm, R}","page":"API","title":"ContinuumMechanicsBase.StrainEnergyDensity","text":"StrainEnergyDensity(\n    ψ::Hyperelastics.AbstractHyperelasticModel{T<:PrincipalValueForm},\n    F::Array{R, 2},\n    p\n) -> Any\n\n\nReturns a function for the strain energy density function for the hyperelastic model based on calculating the principal stretches of the deformation gradient, F. The eigen values are found by the following procedure:\n\nC = F^T cdot F\na = transpose(eigvecs(C))\nC^ast = (U^ast)^2 = a^T cdot C cdot a\nveclambda = diag(U)\n\nArguments:\n\nψ::AbstractHyperelasticModel: Hyperelastic model\nF::Matrix: Deformation gradient matrix\np: Model parameters\n\n\n\n\n\n","category":"method"},{"location":"API/#ContinuumMechanicsBase.StrainEnergyDensity-Union{Tuple{R}, Tuple{T}, Tuple{Hyperelastics.AbstractHyperelasticModel{T}, Vector{R}, Any}} where {T, R}","page":"API","title":"ContinuumMechanicsBase.StrainEnergyDensity","text":"StrainEnergyDensity(\n    ψ::Hyperelastics.AbstractHyperelasticModel{T},\n    _::Array{R, 1},\n    p\n) -> Any\n\n\nReturns the strain energy density for the hyperelastic model ψ with the principle stretches λ⃗ with parameters p.\n\nArguments:\n\nψ::AbstractHyperelasticModel: Hyperelastic model\nλ⃗::Vector: Vector of principal stretches\np: Model parameters\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.HyperelasticProblem","page":"API","title":"Hyperelastics.HyperelasticProblem","text":"Creates an OptimizationProblem for use in Optimization.jl to find the optimal parameters.\n\nArguments:\n\nψ: material model to use\ntest or tests: A single or vector of hyperelastics tests to use when fitting the parameters\nu₀: Initial guess for parameters\nps: Any additional parameters for calling predict\nadb: Select differentiation type from ADTypes.jl. The type is automatically applied to the type of AD applied to the Optimization Problem also.\nloss: Loss function from LossFunctions.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#Hyperelastics.Kawabata1981-Tuple{Float64}","page":"API","title":"Hyperelastics.Kawabata1981","text":"Kawabata1981(λ₁)\n\n\nBiaxial experimental data from Kawabata et al. The data is more challenging to correctly fit a hyperelastic model to and is proposed as a better test than the Treloar1944 simple tension dataset. Available data is for fixed λ₁ of:\n\n1.040\n1.060\n1.080\n1.100\n1.120\n1.14\n1.16\n1.2\n1.24\n1.3\n1.6\n1.9\n2.2\n2.5\n2.8\n3.1\n3.4\n3.7\n\nArguments:\n\nλ₁::Float64: Specification of λ₁ stretch for the data.\n\nKawabata S, Matsuda M, Tei K, Kawai H. Experimental survey of the strain energy density function of isoprene rubber vulcanizate. Macromolecules. 1981 Jan;14(1):154-62.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.Treloar1944Uniaxial-Tuple{}","page":"API","title":"Hyperelastics.Treloar1944Uniaxial","text":"Treloar1944Uniaxial()\n\n\nUniaxial data for tension of 8% S Rubber at 20C from Fig 3 of Treloar 1944. This is commonly used for testing hyperelastic models.\n\nTreloar LR. Stress-strain data for vulcanized rubber under various types of deformation. Rubber Chemistry and Technology. 1944 Dec;17(4):813-25.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.parameter_bounds-Tuple{Hyperelastics.AbstractHyperelasticModel, Hyperelastics.AbstractHyperelasticTest}","page":"API","title":"Hyperelastics.parameter_bounds","text":"parameter_bounds(\n    _::Hyperelastics.AbstractHyperelasticModel,\n    _::Hyperelastics.AbstractHyperelasticTest\n) -> NamedTuple{(:lb, :ub), <:Tuple{@NamedTuple{Ns::Float64, Nc::Float64, α::Float64, η::Float64}, NamedTuple{(:Ns, :Nc, :α, :η), <:Tuple{Float64, Float64, Any, Float64}}}}\n\n\nReturns a tuple of the parameter bounds provided the experimental data and model\n\nArguments:\n\nψ::AbstractHyperelasticModel: Hyperelastic model\ntest or tests: The test or vector of tests to use in finding the parameter bounds.\n\n\n\n\n\n","category":"method"},{"location":"API/#Hyperelastics.parameters-Tuple{Hyperelastics.AbstractHyperelasticModel}","page":"API","title":"Hyperelastics.parameters","text":"parameters(\n    ψ::Hyperelastics.AbstractHyperelasticModel\n) -> Tuple{Symbol, Symbol}\n\n\nReturns a tuple of the parameters required for the model\n\nArguments:\n\nψ::AbstractHyperelasticModel: Hyperelastics model\n\n\n\n\n\n","category":"method"}]
}
