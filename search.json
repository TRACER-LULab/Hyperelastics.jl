[{"body":"private   WFB   —   function WFB  -  Skipped Parameters: Lf, F, A, B, C, D Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.WFB.html"},{"body":"private   J   —   function Volumetric Stretch","id":"docstrings/Hyperelastics.HyperelasticModels.J.html"},{"body":"public   LopezPamies   —   function Lopez - Pamies Parameters: α⃗, μ⃗ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.LopezPamies.html"},{"body":"public   Beatty   —   function Beatty Model Parameters: G₀, Iₘ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Beatty.html"},{"body":"Hyperelastics Stable   Dev","id":"README.html#hyperelastics"},{"body":"public   Isihara   —   function Isihara Parameters: C10, C20, C01 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Isihara.html"},{"body":"public   Swanson   —   function Swanson Parameters: A, α, B, β Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Swanson.html"},{"body":"public   GentThomas   —   function Gent Thomas Paramters: C1, C2 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.GentThomas.html"},{"body":"public   HainesWilson   —   function Haines - Wilson Parameters: C10, C01, C11, C02, C20, C30 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.HainesWilson.html"},{"body":"public   J   —   function Volumetric Stretch","id":"docstrings/Hyperelastics.J.html"},{"body":"public   Knowles   —   function Knowles Parameters: μ, b, n Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Knowles.html"},{"body":"public   ModifiedYeoh   —   function Modified Yeoh Parameters: C10, C20, C30, α, β Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.ModifiedYeoh.html"},{"body":"Make Predictions with Fitted Parameters ∂W(x⃗) = AD . gradient(AD . FiniteDifferencesBackend(), x  - > sum(W(x)), x⃗) [ 1 ] ∂W( [ 2 . 0, 1 / sqrt(2), 1 / sqrt(2) ] ) s = ∂W . (collect . (data . λ⃗)) s₁ = getindex . (s, 1)  -  getindex . (s, 3) p = plot(getindex . (data . λ⃗, 1), (s₁  . -  getindex . (data . s⃗, 1))  . / getindex . (data . s⃗, 1)  . *  100, label= ” Error  [ % ] ” ) p = plot(getindex . (data . λ⃗, 1), s₁, label= ” Predicted ” ) plot ! (p, getindex . (data . λ⃗, 1), getindex . (data . s⃗, 1), label= ” True ” )","id":"example/main.html#make-predictions-with-fitted-parameters"},{"body":"public   HorganMurphy   —   function Horgan Murphy Model Parameters: μ, Jₘ, c Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.HorganMurphy.html"},{"body":"Name Module Visibility Category  Amin   Hyperelastics.HyperelasticModels   public   function   ArmanNarooei   Hyperelastics.HyperelasticModels   public   function   ArrudaBoyce   Hyperelastics.HyperelasticModels   public   function   Attard   Hyperelastics.HyperelasticModels   public   function   Beatty   Hyperelastics.HyperelasticModels   public   function   Bechir4Term   Hyperelastics.HyperelasticModels   public   function   Beda   Hyperelastics.HyperelasticModels   public   function   Biderman   Hyperelastics.HyperelasticModels   public   function   Carroll   Hyperelastics.HyperelasticModels   public   function   ConstrainedJunction   Hyperelastics.HyperelasticModels   public   function   ContinuumHybrid   Hyperelastics.HyperelasticModels   public   function   DavisDeThomas   Hyperelastics.HyperelasticModels   public   function   EdwardVilgis   Hyperelastics.HyperelasticModels   public   function   ExpLn   Hyperelastics.HyperelasticModels   public   function   FungDemiray   Hyperelastics.HyperelasticModels   public   function   GenYeoh   Hyperelastics.HyperelasticModels   public   function   GeneralBeda   Hyperelastics.HyperelasticModels   public   function   GeneralDarijaniNaghdabadi   Hyperelastics.HyperelasticModels   public   function   GeneralMooneyRivlin   Hyperelastics.HyperelasticModels   public   function   Gent   Hyperelastics.HyperelasticModels   public   function   GentThomas   Hyperelastics.HyperelasticModels   public   function   Gregory   Hyperelastics.HyperelasticModels   public   function   HainesWilson   Hyperelastics.HyperelasticModels   public   function   HartmannNeff   Hyperelastics.HyperelasticModels   public   function   HauptSedlan   Hyperelastics.HyperelasticModels   public   function   HorganMurphy   Hyperelastics.HyperelasticModels   public   function   HorganSaccomandi   Hyperelastics.HyperelasticModels   public   function   HossMarczakI   Hyperelastics.HyperelasticModels   public   function   HossMarczakII   Hyperelastics.HyperelasticModels   public   function   Isihara   Hyperelastics.HyperelasticModels   public   function   I₁   Hyperelastics.HyperelasticModels   private   function   I₂   Hyperelastics.HyperelasticModels   private   function   I₃   Hyperelastics.HyperelasticModels   private   function   J   Hyperelastics.HyperelasticModels   private   function   JamesGreenSimpson   Hyperelastics.HyperelasticModels   public   function   Knowles   Hyperelastics.HyperelasticModels   public   function   Lion   Hyperelastics.HyperelasticModels   public   function   LopezPamies   Hyperelastics.HyperelasticModels   public   function   MCC   Hyperelastics.HyperelasticModels   public   function   MansouriDarijani   Hyperelastics.HyperelasticModels   public   function   ModifiedGregory   Hyperelastics.HyperelasticModels   public   function   ModifiedYeoh   Hyperelastics.HyperelasticModels   public   function   MooneyRivlin   Hyperelastics.HyperelasticModels   public   function   NeoHookean   Hyperelastics.HyperelasticModels   public   function   NonaffineTube   Hyperelastics.HyperelasticModels   public   function   Ogden   Hyperelastics.HyperelasticModels   public   function   PengLandel   Hyperelastics.HyperelasticModels   public   function   PucciSaccomandi   Hyperelastics.HyperelasticModels   public   function   Shariff   Hyperelastics.HyperelasticModels   public   function   Swanson   Hyperelastics.HyperelasticModels   public   function   TakamizawaHayashi   Hyperelastics.HyperelasticModels   public   function   Tube   Hyperelastics.HyperelasticModels   public   function   ValanisLandel   Hyperelastics.HyperelasticModels   public   function   VerondaWestmann   Hyperelastics.HyperelasticModels   public   function   Vito   Hyperelastics.HyperelasticModels   public   function   WFB   Hyperelastics.HyperelasticModels   private   function   YamashitaKawabata   Hyperelastics.HyperelasticModels   public   function   Yeoh   Hyperelastics.HyperelasticModels   public   function   Zhao   Hyperelastics.HyperelasticModels   public   function   s⃗̂   Hyperelastics.HyperelasticModels   private   function   HyperelasticProblem   Hyperelastics   public   function   I₁   Hyperelastics   public   function   I₂   Hyperelastics   public   function   I₃   Hyperelastics   public   function   J   Hyperelastics   public   function   biaxial_data   Hyperelastics   public   function   s⃗̂   Hyperelastics   public   function   uniaxial_data   Hyperelastics   public   function ","id":"docstrings.html#docstring-index"},{"body":"public   ArrudaBoyce   —   function Arruda Boyce Parameters: μ, N Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.ArrudaBoyce.html"},{"body":"private   I₂   —   function Second Stretch invariant","id":"docstrings/Hyperelastics.HyperelasticModels.I₂.html"},{"body":"public   Amin   —   function Amin Parameters: C1, C2, C3, C4, N, M Model:","id":"docstrings/Hyperelastics.HyperelasticModels.Amin.html"},{"body":"public   I₂   —   function Second Stretch invariant","id":"docstrings/Hyperelastics.I₂.html"},{"body":"public   I₁   —   function First stretch invariant  -  Currently requires the addition of 5 times the machine precision to allow AD to work correctly","id":"docstrings/Hyperelastics.I₁.html"},{"body":"public   Zhao   —   function Zhao Parameters: C₋₁¹,, C₁¹, C₂¹, C₂² Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Zhao.html"},{"body":"public   biaxial_data   —   function biaxial _ data(s₁, s₂, λ₁, λ₂) Create a biaxial hyperelastic data object from arrays of test data .  The function returns a HyperelasticData object with the stresses and principal stretches .  Currently, this assumes the material is incompressible .","id":"docstrings/Hyperelastics.biaxial_data.html"},{"body":"public   Lion   —   function Lion Parameters: C10, C01, C50 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Lion.html"},{"body":"public   ExpLn   —   function Exp - Ln Parameters: A, a, b Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.ExpLn.html"},{"body":"public   DavisDeThomas   —   function Davis - DeThomas Parameters: A, n, C, k Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.DavisDeThomas.html"},{"body":"public   HorganSaccomandi   —   function Horgan Saccomandi Model Parameters: μ, J Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.HorganSaccomandi.html"},{"body":"public   Ogden   —   function Ogden Parameters: μ⃗, α⃗ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Ogden.html"},{"body":"public   PengLandel   —   function Peng  -  Landel Parameters: E Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.PengLandel.html"},{"body":"public   I₃   —   function Third Stretch invariant","id":"docstrings/Hyperelastics.I₃.html"},{"body":"public   NeoHookean   —   function NeoHookean Parameters: μ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.NeoHookean.html"},{"body":"public   Biderman   —   function Biderman Parameters: C10, C01, C20, C30 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Biderman.html"},{"body":"public   YamashitaKawabata   —   function Yamashita - Kawabata Parameters: C1, C2, C3, N Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.YamashitaKawabata.html"},{"body":"private   I₁   —   function First stretch invariant  -  Currently requires the addition of 5 times the machine precision to allow AD to work correctly","id":"docstrings/Hyperelastics.HyperelasticModels.I₁.html"},{"body":"public   ArmanNarooei   —   function Arman  -  Narooei Parameters: A⃗, B⃗, m⃗, n⃗, α⃗, β⃗ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.ArmanNarooei.html"},{"body":"public   Bechir4Term   —   function Bechir - 4 Term Parameters: C11, C12, C21, C22 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Bechir4Term.html"},{"body":"public   ConstrainedJunction   —   function Constrained Junction Parameters: Gc, νkT, κ Model:","id":"docstrings/Hyperelastics.HyperelasticModels.ConstrainedJunction.html"},{"body":"public   HossMarczakII   —   function Hoss Marczak II Parameters: α, β, μ, b, n, C2 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.HossMarczakII.html"},{"body":"public   JamesGreenSimpson   —   function James - Green - Simpson Parameters: C10, C01, C11, C20, C30 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.JamesGreenSimpson.html"},{"body":"public   Tube   —   function Tube Parameters: Gc, Ge, β Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Tube.html"},{"body":"public   MansouriDarijani   —   function Mansouri - Darijani Parameters: A1, m1, B1, n1 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.MansouriDarijani.html"},{"body":"public   Yeoh   —   function Yeoh Parameters: C10, C20, C30 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Yeoh.html"},{"body":"public   Attard   —   function Attard Parameters: A⃗, B⃗ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Attard.html"},{"body":"MIT License Copyright (c) 2022 Carson Farmer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  “ Software ” ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software . THE SOFTWARE IS PROVIDED  “ AS IS ” , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT .  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE .","id":"LICENSE.html"},{"body":"public   GeneralMooneyRivlin   —   function General Mooney Rivlin Parameters:  [ C ] Model:","id":"docstrings/Hyperelastics.HyperelasticModels.GeneralMooneyRivlin.html"},{"body":"public   ModifiedGregory   —   function Modified Gregory Parameters: A, α, M, B, β, N Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.ModifiedGregory.html"},{"body":"public   s⃗̂   —   function s⃗̂(model, p, λ⃗; adb=AD . ForwardDiffBackend()) Return engineering stress predicted by a  model  with parameters  p  at stretches,  λ⃗ , using differentiation mode,  adb  from AbstractDifferentiation . jl .  Defaults to using ForwardDiff . jl for AD .","id":"docstrings/Hyperelastics.s⃗̂.html"},{"body":"private   s⃗̂   —   function s⃗̂(model, p, λ⃗; adb=AD . ForwardDiffBackend()) Return engineering stress predicted by a  model  with parameters  p  at stretches,  λ⃗ , using differentiation mode,  adb  from AbstractDifferentiation . jl .  Defaults to using ForwardDiff . jl for AD .","id":"docstrings/Hyperelastics.HyperelasticModels.s⃗̂.html"},{"body":"public   Shariff   —   function Shariff Parameters: E, α₁, α₂, α₃, α₄, α₅ Model:","id":"docstrings/Hyperelastics.HyperelasticModels.Shariff.html"},{"body":"public   Gent   —   function Gent Parameters: μ, Jₘ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Gent.html"},{"body":"public   VerondaWestmann   —   function Veronda - Westmann Parameters: C1, C2, α Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.VerondaWestmann.html"},{"body":"public   ValanisLandel   —   function Valanis - Landel Parameters: μ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.ValanisLandel.html"},{"body":"public   ContinuumHybrid   —   function Continuum Hybrid Parameters: K₁, K₂, α, μ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.ContinuumHybrid.html"},{"body":"public   MCC   —   function MCC (modified constrained chain) Parameters: Model:","id":"docstrings/Hyperelastics.HyperelasticModels.MCC.html"},{"body":"public   EdwardVilgis   —   function Edward - Vilgis Parameters: Ns, Nc, α, η Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.EdwardVilgis.html"},{"body":"public   FungDemiray   —   function Fung - Demiray Parameters: μ, b Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.FungDemiray.html"},{"body":"data _ file =  “ example/VHB4910/monotonic _ test _ material _ Heated - VHB4910 _ specimen _ Dumbbell _ H _ strainrate _ 0 . 3 _ length _ 25 . 0 _ width _ 4 . 55 _ thickness _ 1 . 0 . csv ” data _ file =  “ example/PSHBladder/UCN Longitudinal Uniaxial Test Data . csv ” data _ file =  “ example/PSHBladder/UCN Transverse Uniaxial Test Data . csv ” data = uniaxial _ data(df . Stress 1e6, df . Strain . +1) data = uniaxial _ data(df . stress [ 1:25:2550 ]   .  1e6, df . strain [ 1:25:2550 ]   . + 1) W = SussmanBathe p = ComponentVector(s⃗ = data . s⃗, λ⃗ = data . λ⃗, k = 4) plot(getindex . (data . λ⃗, 1), (s₁  . -  getindex . (data . s⃗, 1))  . / getindex . (data . s⃗, 1)  . *  100, label= ” Error  [ % ] ” ) e = range( - 2 . 0, 2 . 0, length=201) λ = exp . (e) τ(λ) = exp(2log(λ))  -  exp( - log(λ)) + 0 . 5  *  (1  -  cos(2π  *  log(λ)))  *  (0 ≤ log(λ) ≤ 1) data = uniaxial _ data(τ . (λ), λ) W = SussmanBathe(getindex . (data . s⃗, 1), getindex . (data . λ⃗, 1), 5) W( [ 2 . 0, 1 / sqrt(2), 1 / sqrt(2) ] )","id":"example/main.html"},{"body":"public   HartmannNeff   —   function Hartmann - Neff Parameters: α, Ci0, C0j Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.HartmannNeff.html"},{"body":"public   GeneralBeda   —   function General Beda Parameters: C, K, α, β Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.GeneralBeda.html"},{"body":"public   HauptSedlan   —   function Haupt Sedlan Parameters: C10, C01, C11, C02, C30 Model:","id":"docstrings/Hyperelastics.HyperelasticModels.HauptSedlan.html"},{"body":"public   Vito   —   function Vito Parameters: α, β, γ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Vito.html"},{"body":"public   HyperelasticProblem   —   function HyperelasticProblem(data::HyperelasticData, model, u₀, ps; loss=L2DistLoss(), agg=AggMode . Mean(), cons=(x, p)  - >  [ true ] , kwargs … ) Returns an  OptimizationProblem  for solving with GalacticOptim . jl .   data  is the hyperelastic experimental data,  model  is the strain energy density as a function of the parameters (i . e .   f(p) = W(p)(λ⃗) ) .   ps  is any hyperparameters for the model (currently not supported) .   loss  defines the loss function to be used in the optimization .  Currently defaults to the  - norm between the predicted and experimental data .   agg  defines the aggregration mode of the errors, defaults to the mean of the errors .   cons  define any constrain equations involving the parameters of the model .   kwargs  are passed to  OptimizationProblem .  To set parameter bounds, use the keywords  lb  and  ub  respectively .","id":"docstrings/Hyperelastics.HyperelasticProblem.html"},{"body":"public   TakamizawaHayashi   —   function Takamizawa - Hayashi From: A description of arterial wall mechanics using limiting chain extensibility constitutitive models by Horgan and Saccomandi Parameters: c, Jₘ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.TakamizawaHayashi.html"},{"body":"public   Beda   —   function Beda Parameters: C1, C2, C3, K1, α, β, ζ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Beda.html"},{"body":"public   Carroll   —   function Carroll Parameters: A, B, C Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Carroll.html"},{"body":"private   I₃   —   function Third Stretch invariant","id":"docstrings/Hyperelastics.HyperelasticModels.I₃.html"},{"body":"public   PucciSaccomandi   —   function Pucci - Saccomandi Parameters: K, μ, Jₘ Model ","id":"docstrings/Hyperelastics.HyperelasticModels.PucciSaccomandi.html"},{"body":"public   GeneralDarijaniNaghdabadi   —   function General Darijani Naghdabadi Parameters: A⃗, B⃗, m⃗, n⃗ Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.GeneralDarijaniNaghdabadi.html"},{"body":"public   Gregory   —   function Gregory Parameters: A, B, C, m, n Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.Gregory.html"},{"body":"public   MooneyRivlin   —   function Mooney Rivlin Model Parameters: C01, C10 Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.MooneyRivlin.html"},{"body":"public   GenYeoh   —   function GenYeoh Parameters: K1, K2, K3, m, p, q Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.GenYeoh.html"},{"body":"public   NonaffineTube   —   function Nonaffine  -  Tube Parameters: Gc, Ge Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.NonaffineTube.html"},{"body":"public   HossMarczakI   —   function Hoss Marczak I Parameters: α, β, μ, b, n Model: ","id":"docstrings/Hyperelastics.HyperelasticModels.HossMarczakI.html"},{"body":"public   uniaxial_data   —   function uniaxial _ data(s₁, λ₁) Create a uniaxial hyperelastic data object from arrays of test data .  The function returns a HyperelasticData object with the stresses and principal stretches .  Currently, this assumes the material is incompressible .","id":"docstrings/Hyperelastics.uniaxial_data.html"}]